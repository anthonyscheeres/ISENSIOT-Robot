//
// automatically generated by spin2cpp v3.4.0-beta on Mon Nov 14 09:24:09 2016
// spin2cpp --ccode --gas s3.spin 
//

#ifndef scribbler_Class_Defined__
#define scribbler_Class_Defined__

#include <stdint.h>

// -[ Version, etc. ]-
/*  Version numbers and miscellaneous other constants.  */
// Major version ID.
#define SCRIBBLER_VERSION (2)
// Minor version ID.
#define SCRIBBLER_SUBVERSION (2578)
// Sets the size of the sound buffer (words).
#define SCRIBBLER__TONE_Q_SIZE (1200)
#define SCRIBBLER_NO_CHANGE ((-1))
#define SCRIBBLER_FOREVER (2147483647)
#define SCRIBBLER_UNDEF ((int32_t)0x80000000U)
#define SCRIBBLER_ACK (-1)
#define SCRIBBLER_NAK (0)
#define SCRIBBLER_NONE (0)
#define SCRIBBLER_LEFT (1)
#define SCRIBBLER_RIGHT (2)
#define SCRIBBLER_CENTER (3)
// Used with LEDs, light sensors, line sensors,
#define SCRIBBLER_POWER (4)
// obstacle sensors, and wheels.
// -[ Button and LEDs ]-
/*  The button constants are used internally for setting and testing button modes.
     The LED constansts can be used for turning the LEDs on and off and for setting intensity, blinking, and colors. 
 */
// Button constants:
// Bit selector for button reset enable.
#define SCRIBBLER_RST_ENA (2)
// Bit selector for button reset LED indicator enable.
#define SCRIBBLER_LED_ENA (1)
// LED constants: 
// Applies to all LEDs.
#define SCRIBBLER_OFF (0)
// Apply to red/green LEDs only...
#define SCRIBBLER_RED (240)
#define SCRIBBLER_ORANGE (180)
#define SCRIBBLER_YELLOW (120)
#define SCRIBBLER_CHARTREUSE (75)
#define SCRIBBLER_GREEN (15)
#define SCRIBBLER_DIM_RED (112)
#define SCRIBBLER_DIM_GREEN (7)
#define SCRIBBLER_BLINK_RED (241)
#define SCRIBBLER_BLINK_GREEN (31)
#define SCRIBBLER_ALT_RED_GREEN (255)
// Apply to power LED only...
#define SCRIBBLER_BLUE (240)
#define SCRIBBLER_BLINK_BLUE (241)
#define SCRIBBLER_DIM_BLUE (112)
#define SCRIBBLER_SQU (0)
#define SCRIBBLER_SAW (1)
#define SCRIBBLER_TRI (2)
// Square, sawtooth, triangle, sine.
#define SCRIBBLER_SIN (3)
#define SCRIBBLER_STOP (1)
#define SCRIBBLER_PAUSE (2)
// Tone player immediate commands.
#define SCRIBBLER_PLAY (3)
#define SCRIBBLER_TONE (0)
#define SCRIBBLER_VOLU (1)
#define SCRIBBLER_SYNC (2)
// Tone player sequence commands.
#define SCRIBBLER_PAUS (3)
// -[ Result array indices ]-
/*  These constants can be used to reference the various values in the Results array.  */
#define SCRIBBLER_ADC_VSS (0)
#define SCRIBBLER_ADC_VDD (1)
#define SCRIBBLER_ADC_5V (2)
#define SCRIBBLER_ADC_5V_DIV (3)
#define SCRIBBLER_ADC_VBAT (4)
// S2 Only - Motor Over Current Reference Voltage
#define SCRIBBLER_ADC_VTRIP (5)
// S3 Only - Motor Supply Voltage
#define SCRIBBLER_ADC_VMOT (5)
#define SCRIBBLER_ADC_IDD (6)
#define SCRIBBLER_ADC_RIGHT_LGT (7)
#define SCRIBBLER_ADC_CENTER_LGT (8)
#define SCRIBBLER_ADC_LEFT_LGT (9)
#define SCRIBBLER_ADC_RIGHT_LIN (10)
#define SCRIBBLER_ADC_LEFT_LIN (11)
#define SCRIBBLER_ADC_P6 (12)
#define SCRIBBLER_ADC_P7 (13)
#define SCRIBBLER_ADC_IMOT (14)
#define SCRIBBLER_ADC_IDLER (15)
#define SCRIBBLER_CNT_IDLER (16)
// and 19
#define SCRIBBLER_LED_BYTES (18)
// and 21
#define SCRIBBLER_TIMER (20)
#define SCRIBBLER_BUTTON_CNT (22)
// -[ Propeller pins ]-
/*  Port names for pins A0 through A31.  */
// Hacker ports 0 - 5.
#define SCRIBBLER_P0 (0)
#define SCRIBBLER_P1 (1)
#define SCRIBBLER_P2 (2)
#define SCRIBBLER_P3 (3)
#define SCRIBBLER_P4 (4)
#define SCRIBBLER_P5 (5)
// Output to left obstacle IRED.
#define SCRIBBLER_OBS_TX_LEFT (6)
// Output to LED shift register data pin.
#define SCRIBBLER_LED_DATA (7)
// Output to LED shift register clock pin.
#define SCRIBBLER_LED_CLK (8)
// Output (feedback) for microphone sigma-delta ADC.
#define SCRIBBLER_MIC_ADC_OUT (9)
// Input for microphone sigma-delta ADC.
#define SCRIBBLER_MIC_ADC_IN (10)
// Input for pushbutton.
#define SCRIBBLER_BUTTON (11)
// Output to idler wheel encoder IRED.
#define SCRIBBLER_IDLER_TX (12)
// Input from left motor encoder.
#define SCRIBBLER_MOT_LEFT_ENC (13)
// Input from right motor encoder.
#define SCRIBBLER_MOT_RIGHT_ENC (14)
// Output to right obstacle IRED.
#define SCRIBBLER_OBS_TX_RIGHT (15)
// Output to left motor controller direction pin.
#define SCRIBBLER_MOT_LEFT_DIR (16)
// Output to right motor controller direction pin.
#define SCRIBBLER_MOT_RIGHT_DIR (17)
// Output to left motor controller PWM pin.
#define SCRIBBLER_MOT_LEFT_PWM (18)
// Output to right motor controller PWM pin.
#define SCRIBBLER_MOT_RIGHT_PWM (19)
// Input from obstacle detector IR receiver.
#define SCRIBBLER_OBS_RX (20)
// Output to speaker amplifier.
#define SCRIBBLER_SPEAKER (21)
// Outputs to analog multiplexer address pins.
#define SCRIBBLER_MUX0 (22)
#define SCRIBBLER_MUX1 (23)
#define SCRIBBLER_MUX2 (24)
#define SCRIBBLER_MUX3 (25)
// Output (feedback) from main sigma-delta ADC.
#define SCRIBBLER__MUX_ADC_OUT (26)
// Input to main sigma-delta ADC.
#define SCRIBBLER__MUX_ADC_IN (27)
// Output clock to EEPROMs.
#define SCRIBBLER_SCL (28)
// Input/Output data from/to EEPROMs.
#define SCRIBBLER_SDA (29)
// Output to RS232.
#define SCRIBBLER_TX (30)
// Input from RS232.
#define SCRIBBLER_RX (31)
// -[ ADC constants ]-
/*  These are the analog multiplexer addresses controlled by pins MUX0 to MUX3.  */
// Motor current.
#define SCRIBBLER__MUX_IMOT (0)
//
#define SCRIBBLER__MUX_VTRIP (1)
// Battery voltage.
#define SCRIBBLER__MUX_VBAT (2)
// Idler encoder.
#define SCRIBBLER__MUX_IDLER (3)
// Vss reference.
#define SCRIBBLER__MUX_VSS (4)
//               
#define SCRIBBLER__MUX_5V_DIV (5)
// +5V reference.
#define SCRIBBLER__MUX_5V (6)
// +3.3V reference.
#define SCRIBBLER__MUX_VDD (7)
// Hacker port P7 analog input.
#define SCRIBBLER__MUX_P7 (8)
// Right light sensor.
#define SCRIBBLER__MUX_RIGHT_LGT (9)
// Center light sensor.
#define SCRIBBLER__MUX_CENTER_LGT (10)
// Hacker port P6 analog input.
#define SCRIBBLER__MUX_P6 (11)
// Vdd current for S2 / Gnd for S3
#define SCRIBBLER__MUX_IDD (12)
// Left ligth sensor.
#define SCRIBBLER__MUX_LEFT_LGT (13)
// Right line sensor.
#define SCRIBBLER__MUX_RIGHT_LIN (14)
// Left line sensor.
#define SCRIBBLER__MUX_LEFT_LIN (15)
#define SCRIBBLER__VSS (((SCRIBBLER__MUX_VSS << 12) | (SCRIBBLER_ADC_VSS << 8)))
#define SCRIBBLER__VDD (((SCRIBBLER__MUX_VDD << 12) | (SCRIBBLER_ADC_VDD << 8)))
#define SCRIBBLER__5V (((SCRIBBLER__MUX_5V << 12) | (SCRIBBLER_ADC_5V << 8)))
#define SCRIBBLER__5V_DIV (((SCRIBBLER__MUX_5V_DIV << 12) | (SCRIBBLER_ADC_5V_DIV << 8)))
#define SCRIBBLER__VBAT (((SCRIBBLER__MUX_VBAT << 12) | (SCRIBBLER_ADC_VBAT << 8)))
#define SCRIBBLER__IDD (((SCRIBBLER__MUX_IDD << 12) | (SCRIBBLER_ADC_IDD << 8)))
#define SCRIBBLER__IMOT (((SCRIBBLER__MUX_IMOT << 12) | (SCRIBBLER_ADC_IMOT << 8)))
#define SCRIBBLER__VTRIP (((SCRIBBLER__MUX_VTRIP << 12) | (SCRIBBLER_ADC_VTRIP << 8)))
#define SCRIBBLER__IDLER (((SCRIBBLER__MUX_IDLER << 12) | (SCRIBBLER_ADC_IDLER << 8)))
#define SCRIBBLER__RIGHT_LGT (((SCRIBBLER__MUX_RIGHT_LGT << 12) | (SCRIBBLER_ADC_RIGHT_LGT << 8)))
#define SCRIBBLER__LEFT_LGT (((SCRIBBLER__MUX_LEFT_LGT << 12) | (SCRIBBLER_ADC_LEFT_LGT << 8)))
#define SCRIBBLER__CENTER_LGT (((SCRIBBLER__MUX_CENTER_LGT << 12) | (SCRIBBLER_ADC_CENTER_LGT << 8)))
#define SCRIBBLER__RIGHT_LIN (((SCRIBBLER__MUX_RIGHT_LIN << 12) | (SCRIBBLER_ADC_RIGHT_LIN << 8)))
#define SCRIBBLER__LEFT_LIN (((SCRIBBLER__MUX_LEFT_LIN << 12) | (SCRIBBLER_ADC_LEFT_LIN << 8)))
#define SCRIBBLER__P6 (((SCRIBBLER__MUX_P6 << 12) | (SCRIBBLER_ADC_P6 << 8)))
#define SCRIBBLER__P7 (((SCRIBBLER__MUX_P7 << 12) | (SCRIBBLER_ADC_P7 << 8)))
// -[ EEPROM addresses ]-
// Base address for EEPROM data area.
#define SCRIBBLER_EE_BASE (0)
// [1 byte]  Reset count address.
#define SCRIBBLER_EE_RESET_CNT ((SCRIBBLER_EE_BASE + 0))
// [5 bytes] Wheel calibration data.
#define SCRIBBLER_EE_WHEEL_CALIB ((SCRIBBLER_EE_BASE + 1))
// [4 bytes] Light sensor calibration data.
#define SCRIBBLER_EE_LIGHT_CALIB ((SCRIBBLER_EE_BASE + 6))
// [2 bytes] Line sensor threshold data.
#define SCRIBBLER_EE_LINE_THLD ((SCRIBBLER_EE_BASE + 10))
// [2 bytes] Obstacle threshold data.
#define SCRIBBLER_EE_OBSTACLE_THLD ((SCRIBBLER_EE_BASE + 12))
// Beginning of unreserved user area.
#define SCRIBBLER_EE_USER_AREA ((SCRIBBLER_EE_BASE + 1024))
// -[ ADC Soak times ]-
#define SCRIBBLER__SOAK_1US ((0 << 4))
#define SCRIBBLER__SOAK_2US ((1 << 4))
#define SCRIBBLER__SOAK_4US ((2 << 4))
#define SCRIBBLER__SOAK_8US ((3 << 4))
#define SCRIBBLER__SOAK_16US ((4 << 4))
#define SCRIBBLER__SOAK_32US ((5 << 4))
#define SCRIBBLER__SOAK_64US ((6 << 4))
#define SCRIBBLER__SOAK_128US ((7 << 4))
#define SCRIBBLER__SOAK_256US ((8 << 4))
#define SCRIBBLER__SOAK_512US ((9 << 4))
#define SCRIBBLER__SOAK_1MS ((10 << 4))
#define SCRIBBLER__SOAK_2MS ((11 << 4))
#define SCRIBBLER__SOAK_4MS ((12 << 4))
#define SCRIBBLER__SOAK_8MS ((13 << 4))
#define SCRIBBLER__SOAK_16MS ((14 << 4))
#define SCRIBBLER__SOAK_32MS ((15 << 4))
// -[ Filter values ]-
#define SCRIBBLER__LPF_NONE ((0 << 1))
#define SCRIBBLER__LPF_1MS ((1 << 1))
#define SCRIBBLER__LPF_2MS ((2 << 1))
#define SCRIBBLER__LPF_4MS ((3 << 1))
#define SCRIBBLER__LPF_8MS ((4 << 1))
#define SCRIBBLER__LPF_16MS ((5 << 1))
#define SCRIBBLER__LPF_32MS ((6 << 1))
#define SCRIBBLER__LPF_64MS ((7 << 1))
// -[ Reference values ]-
#define SCRIBBLER__REF_3V3 (0)
#define SCRIBBLER__REF_5V0 (1)
// -[ Default values ]-
/*  These values are assigned to their respective variables on startup, unless overriding values are stored
     in EEPROM. 
 */
#define SCRIBBLER_DEFAULT_FULL_CIRCLE (955)
#define SCRIBBLER_DEFAULT_WHEEL_SPACE (153)
#define SCRIBBLER_DEFAULT_LIGHT_SCALE (0)
#define SCRIBBLER_DEFAULT_LINE_THLD (32)
#define SCRIBBLER_DEFAULT_OBSTACLE_THLD (1)
// -[ Motor constants ]-
/*  Command, status bits, and indices into the motor debug array.  */
// Command bits:
// Sets immediate (preemptive) mode for motor command.
#define SCRIBBLER_MOT_IMM (1)
// Sets continuous (non-distance) mode for motor command.
#define SCRIBBLER_MOT_CONT (2)
// Sets timeout mode for motor command.
#define SCRIBBLER_MOT_TIMED (4)
// Status bits:
#define SCRIBBLER_MOT_RUNNING (1)
#define SCRIBBLER_MOT_STOPPED (0)
// Debug indices:
// These are indices into the motor debug array.
// Offsets are in bytes counting from @Motor_stat.
// The prefix indicates size of each value (Byte, Word, Long)
// All four control velocities.                                   
#define SCRIBBLER_L_ALL_VEL (4)
// Target velocity.                        
#define SCRIBBLER_B_TARG_VEL (4)
// Current (measured) velocity.
#define SCRIBBLER_B_CUR_VEL (5)
// End velocity for this stroke.
#define SCRIBBLER_B_END_VEL (6)
// Maximum velocity for this stroke.
#define SCRIBBLER_B_MAX_VEL (7)
// Both left and right stroke distances.
#define SCRIBBLER_L_BOTH_DIST (8)
// Right stroke distance.
#define SCRIBBLER_W_RIGHT_DIST (8)
// Left stroke distance.
#define SCRIBBLER_W_LEFT_DIST (10)
// Right coordinated countdown value.
#define SCRIBBLER_L_RIGHT_COUNT (12)
// Left coordinated countdown value.
#define SCRIBBLER_L_LEFT_COUNT (16)
// Dominant distance and count.
#define SCRIBBLER_L_DOM (20)
// Total distance for dominant wheel to travel.
#define SCRIBBLER_W_DOM_DIST (20)
// Distance the dominant wheel has traveled.
#define SCRIBBLER_W_DOM_COUNT (22)
// -[ Hardware Model Number Constannts ]-     
#define SCRIBBLER_MODEL_S2 (0)
#define SCRIBBLER_MODEL_S3 (1)
// -[ Tone generator ]-
/*  These constants are used to set the voices in the tone player and to form its commands.  */

typedef struct scribbler {
  char dummy__;
} scribbler;

  int32_t scribbler_start(scribbler *self);
  int32_t scribbler_start_motors(void);
  int32_t scribbler_start_tones(scribbler *self);
  int32_t scribbler_start_mic_env(scribbler *self);
  void scribbler_stop_all(void);
  int32_t scribbler_get_mic_env(void);
  void scribbler_begin_path(void);
  void scribbler_end_path(void);
  void scribbler_set_speed(int32_t spd);
  void scribbler_move_to(int32_t x, int32_t y);
  void scribbler_arc_to(int32_t x, int32_t y, int32_t radius);
  void scribbler_move_by(int32_t dx, int32_t dy);
  void scribbler_arc_by(int32_t dx, int32_t dy, int32_t radius);
  int32_t scribbler_align_with(int32_t heading);
  void scribbler_turn_to_deg(int32_t heading);
  void scribbler_turn_to(int32_t heading);
  void scribbler_turn_by_deg(int32_t dw);
  int32_t scribbler_turn_by(int32_t dw);
  void scribbler_here_is(int32_t x, int32_t y);
  void scribbler_heading_is_deg(int32_t w);
  void scribbler_heading_is(int32_t w);
  int32_t scribbler_read_wheel_calibration(void);
  int32_t scribbler_write_wheel_calibration(void);
  int32_t scribbler_default_wheel_calibration(void);
  int32_t scribbler_set_wheel_calibration(int32_t circle, int32_t space);
  int32_t scribbler_get_wheel_calibration(void);
  void scribbler_go_left(int32_t dist);
  void scribbler_go_right(int32_t dist);
  void scribbler_go_forward(int32_t dist);
  void scribbler_go_back(int32_t dist);
  void scribbler_turn_deg(int32_t ccw_degrees);
  void scribbler_arc_deg(int32_t ccw_degrees, int32_t radius);
  void scribbler_turn(int32_t ccw_units);
  void scribbler_arc(int32_t ccw_units, int32_t radius);
  void scribbler_turn_deg_now(int32_t ccw_degrees);
  void scribbler_arc_deg_now(int32_t ccw_degrees, int32_t radius);
  void scribbler_turn_now(int32_t ccw_units);
  void scribbler_arc_now(int32_t ccw_units, int32_t radius);
  int32_t scribbler_move(int32_t left_distance, int32_t right_distance, int32_t move_time, int32_t max_speed, int32_t no_stop);
  void scribbler_wheels_now(int32_t left_velocity, int32_t right_velocity, int32_t move_time);
  void scribbler_move_now(int32_t left_distance, int32_t right_distance, int32_t move_time, int32_t max_speed, int32_t no_stop);
  void scribbler_stop_now(void);
  void scribbler_wait_stop(void);
  int32_t scribbler_stalled(void);
  int32_t scribbler_moving(void);
  int32_t scribbler_motion(void);
  int32_t scribbler_motion_addr(void);
  int32_t scribbler_move_ready(void);
  void scribbler_run_motors(int32_t command, int32_t left_distance, int32_t right_distance, int32_t timeout, int32_t max_speed, int32_t end_speed);
  int32_t scribbler_read_obstacle_threshold(void);
  int32_t scribbler_write_obstacle_threshold(void);
  int32_t scribbler_default_obstacle_threshold(void);
  int32_t scribbler_set_obstacle_threshold(int32_t thld);
  int32_t scribbler_get_obstacle_threshold(void);
  int32_t scribbler_obstacle(scribbler *self, int32_t side, int32_t threshold);
  int32_t scribbler_read_line_threshold(void);
  int32_t scribbler_write_line_threshold(void);
  int32_t scribbler_default_line_threshold(void);
  int32_t scribbler_set_line_threshold(int32_t thld);
  int32_t scribbler_get_line_threshold(void);
  int32_t scribbler_line_sensor(int32_t side, int32_t threshold);
  int32_t scribbler_read_light_calibration(void);
  int32_t scribbler_write_light_calibration(void);
  int32_t scribbler_default_light_calibration(void);
  int32_t scribbler_set_light_calibration(int32_t left_scale, int32_t center_scale, int32_t right_scale);
  int32_t scribbler_get_light_calibration(void);
  int32_t scribbler_light_sensor(int32_t side);
  int32_t scribbler_light_sensor_log(int32_t side);
  int32_t scribbler_light_sensor_raw(int32_t side);
  int32_t scribbler_light_sensor_word(int32_t side);
  int32_t scribbler_get_results(int32_t index);
  int32_t scribbler_get_adc_results(int32_t index);
  int32_t scribbler_button_press(void);
  int32_t scribbler_button_count(void);
  int32_t scribbler_reset_button_count(void);
  void scribbler_button_mode(int32_t led_enable, int32_t reset_enable);
  void scribbler_set_leds(int32_t left_color, int32_t center_color, int32_t right_color, int32_t power_color);
  void scribbler_set_led(int32_t index, int32_t color);
  int32_t scribbler_beep(void);
  void scribbler_command_tone(int32_t cmd_tone);
  int32_t scribbler_set_volume(int32_t vol);
  void scribbler_set_voices(int32_t v1, int32_t v2);
  int32_t scribbler_play_sync(int32_t value);
  int32_t scribbler_play_pause(int32_t value);
  int32_t scribbler_get_sync(void);
  int32_t scribbler_play_tone(int32_t time, int32_t frq1, int32_t frq2);
  int32_t scribbler_play_tones(int32_t addr);
  void scribbler_wait_sync(int32_t value);
  void scribbler_start_timer(int32_t number);
  int32_t scribbler_get_timer(int32_t number);
  void scribbler_delay_tenths(scribbler *self, int32_t time);
  int32_t scribbler_ee_read_byte(int32_t addr);
  int32_t scribbler_ee_write_byte(int32_t addr, int32_t data);
  int32_t scribbler_get_model_s2(void);
  int32_t scribbler_get_model_s3(void);
  int32_t scribbler_set_power_off(void);
  int32_t scribbler_get_usb_powered(void);
  int32_t scribbler_get_charging(void);
#endif
